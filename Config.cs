// Generated by https://quicktype.io

namespace Brainpreter
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Config
    {
        [JsonProperty("ShiftLeft")]
        public string ShiftLeft { get; set; } = "<";

        [JsonProperty("ShiftRight")]
        public string ShiftRight { get; set; } = ">";

        [JsonProperty("Plus")]
        public string Plus { get; set; } = "+";

        [JsonProperty("Minus")]
        public string Minus { get; set; } = "-";

        [JsonProperty("Write")]
        public string Write { get; set; } = ".";

        [JsonProperty("Input")]
        public string Input { get; set; } = ",";

        [JsonProperty("StartLoop")]
        public string StartLoop { get; set; } = "[";

        [JsonProperty("EndLoop")]
        public string EndLoop { get; set; } = "]";
        [JsonProperty("SingleChar")]
        public bool SingleChar {get; set; } = false;
    }

    public partial class Config
    {
        public static Config FromJson(string json) => JsonConvert.DeserializeObject<Config>(json, Brainpreter.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Config self) => JsonConvert.SerializeObject(self, Brainpreter.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
